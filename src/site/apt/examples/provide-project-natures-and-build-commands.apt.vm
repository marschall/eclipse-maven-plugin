## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
## 
##   http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.

 ------
 Provide Build Commands
 ------
 Edwin Punzalan
 ------
 2006-07-14
 ------


Provide Project Natures And Build Commands for Eclipse

  The default project nature for projects created by the Eclipse Plugin is
  <<<org.eclipse.jdt.core.javanature>>> and the default build command is
  <<<org.eclipse.jdt.core.javabuilder>>>. Additional project natures and build
  commands are also added as needed when WTP is enabled.

  If you want to provide additional project natures and build commands for your
  project, i.e. Spring project, you can add them in your pom.xml like this:

+-----
<project>
  [...]
  <build>
    [...]
    <plugins>
      [...]
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>${project.version}</version>
        <configuration>
          <additionalProjectnatures>
            <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
          </additionalProjectnatures>
          <additionalBuildcommands>
            <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
          </additionalBuildcommands>
        </configuration>
      </plugin>
      [...]
    </plugins>
    [...]
  </build>
  [...]
</project>
+-----

  To provide your own project natures and build commands which will override
  the defaults, you can put them in your pom.xml as follows:

+-----
<project>
  [...]
  <build>
    [...]
    <plugins>
      [...]
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin<artifactId>
        <version>${project.version}</version>
        <configuration>
          <projectnatures>
            <projectnature>my.own.project.nature</projectnature>
          </projectnatures>
          <buildcommands>
            <buildcommand>my.own.build.command</buildcommand>
          </buildcommands>
        </configuration>
      </plugin>
      [...]
    </plugins>
    [...]
  </build>
  [...]
</project>
+-----
